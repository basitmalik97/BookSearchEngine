{"version":3,"sources":["utils/auth.js","utils/mutations.js","pages/SearchBooks.js","utils/localStorage.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["getProfile","decode","this","getToken","loggedIn","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem","LOGIN_USER","gql","_templateObject","_taggedTemplateLiteral","ADD_USER","_templateObject2","SAVE_BOOK","_templateObject3","REMOVE_BOOK","_templateObject4","SearchBooks","searchedBooks","setSearchedBooks","useState","searchInput","setSearchInput","savedBookIds","setSavedBookIds","JSON","parse","saveBook","useMutation","useEffect","bookIdArr","length","stringify","React","createElement","Fragment","Jumbotron","fluid","className","Container","Form","onSubmit","async","event","preventDefault","response","query","fetch","concat","ok","Error","items","json","bookData","map","book","_book$volumeInfo$imag","bookId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","Auth","disabled","some","savedBookId","onClick","bookToSave","find","log","variables","handleSaveBook","GET_ME","SavedBooks","loading","data","useQuery","userData","me","deleteBook","handleDeleteBook","updatedSavedBookIds","filter","removeBookId","savedBooks","SignupForm","userFormData","setUserFormData","username","email","password","validated","showAlert","setShowAlert","addUser","handleInputChange","noValidate","currentTarget","checkValidity","stopPropagation","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","SignUpForm","httpLink","createHttpLink","uri","authLink","setContext","_","_ref","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","Router","Switch","Route","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c69e3c1d.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook(\r\n    $authors: [String]!\r\n    $description: String!\r\n    $title: String!\r\n    $bookId: ID!\r\n    $image: String!\r\n  ) {\r\n    saveBook(\r\n      authors: $authors\r\n      description: $description\r\n      title: $title\r\n      bookId: $bookId\r\n      image: $image\r\n    ) {\r\n      _id\r\n      username\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    console.log(bookToSave);\r\n\r\n    try {\r\n      await saveBook({\r\n        variables: { ...bookToSave },\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { removeBookId } from \"../utils/localStorage\";\r\nimport { GET_ME } from \"../utils/queries\";\r\nimport { REMOVE_BOOK } from \"../utils/mutations\";\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(GET_ME);\r\n\r\n  const userData = data?.me;\r\n \r\n  const [deleteBook] = useMutation(REMOVE_BOOK);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await deleteBook({\r\n        variables: { bookId: bookId },\r\n      });\r\n\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\r\n              }:`\r\n            : \"You have no saved books!\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport { ADD_USER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport { LOGIN_USER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [login] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from \"react\";\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  createHttpLink,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport SavedBooks from \"./pages/SavedBooks\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"/graphql\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(\"id_token\");\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={SearchBooks} />\r\n            <Route exact path=\"/saved\" component={SavedBooks} />\r\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}